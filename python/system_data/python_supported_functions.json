{
  "signatures": {
    "N": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": " -(",
        "code_after": ")"
      }
    ],
    "NOT": [
      {
        "inputs": [
          "Boolean"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": " not "
      }
    ],
    "ABS": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "abs(",
        "code_after": ")"
      }
    ],
    "SIN": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.sin(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "COS": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.cos(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "TAN": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.tan(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "ASIN": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.asin(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "ACOS": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.acos(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "ATAN": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.atan(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "SQRT": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.sqrt(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "EXP": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.exp(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "LN": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.log(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "LOG10": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.log10(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "FACT": [
      {
        "inputs": [
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "math.factorial(",
        "code_after": ")",
        "requires_imports": [
          "import math"
        ]
      }
    ],
    "SUM": [
      {
        "inputs": [
          "Multiple[Number]"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "sum([",
        "code_after": "])"
      }
    ],
    "MIN": [
      {
        "inputs": [
          "Multiple[Number]"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "min([",
        "code_after": "])"
      }
    ],
    "MAX": [
      {
        "inputs": [
          "Multiple[Number]"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "max([",
        "code_after": "])"
      }
    ],
    "AND": [
      {
        "inputs": [
          "Multiple[Boolean]"
        ],
        "outputs": [
          "Boolean"
        ],
        "code_before": "all([",
        "code_after": "])"
      }
    ],
    "OR": [
      {
        "inputs": [
          "Multiple[Boolean]"
        ],
        "outputs": [
          "Boolean"
        ],
        "code_before": "any([",
        "code_after": "])"
      }
    ],
    "PRODUCT": [
      {
        "inputs": [
          "Multiple[Number]"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "functools.reduce(lambda x, y: x * y, [",
        "code_after": "], 1)",
        "requires_imports": [
          "import functools"
        ]
      }
    ],
    "+": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "+",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Date",
          "Number"
        ],
        "outputs": [
          "Date"
        ],
        "code_before": "add_days_to_datetime(",
        "code_after": ")",
        "add_functions": [
          "ADD_DAYS_TO_DATETIME"
        ]
      }
    ],
    "-": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "-",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Date",
          "Number"
        ],
        "outputs": [
          "Date"
        ],
        "code_before": "subtract_days_from_datetime(",
        "code_after": ")",
        "add_functions": [
          "SUBTRACT_DAYS_FROM_DATETIME"
        ]
      }
    ],
    "*": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "*",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "/": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "/ (",
        "code_before": "(",
        "code_after": " + 1e-10))"
      }
    ],
    "^": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "**",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "MOD": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "operator": "%",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    ">": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": ">",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "<": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "<",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    ">=": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": ">=",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "<=": [
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "<=",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "&": [
      {
        "inputs": [
          "Text",
          "Text"
        ],
        "outputs": [
          "Text"
        ],
        "operator": "+",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "=": [
      {
        "inputs": [
          "TABLE_COLUMN[Number]",
          "Number"
        ],
        "outputs": [
          "TABLE_COLUMN[Boolean]"
        ],
        "operator": " == ",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "TABLE_COLUMN[Text]",
          "Text"
        ],
        "outputs": [
          "TABLE_COLUMN[Boolean]"
        ],
        "operator": " == ",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "ARRAY[Number]",
          "Number"
        ],
        "outputs": [
          "ARRAY[Boolean]"
        ],
        "code_before": "sc_compare_elements(",
        "code_after": ")",
        "add_functions": [
          "SC_COMPARE_ELEMENTS"
        ]
      },
      {
        "inputs": [
          "ARRAY[Text]",
          "Text"
        ],
        "outputs": [
          "ARRAY[Boolean]"
        ],
        "code_before": "sc_compare_elements(",
        "code_after": ")",
        "add_functions": [
          "SC_COMPARE_ELEMENTS"
        ]
      },
      {
        "inputs": [
          "Text",
          "Text"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "==",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "==",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Date",
          "Date"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "==",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Boolean",
          "Boolean"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "==",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "<>": [
      {
        "inputs": [
          "Text",
          "Text"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "!=",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Number",
          "Number"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "!=",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Date",
          "Date"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "!=",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "Boolean",
          "Boolean"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "!=",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "AND2": [
      {
        "inputs": [
          "Boolean",
          "Boolean"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "and",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "TABLE_COLUMN[Boolean]",
          "TABLE_COLUMN[Boolean]"
        ],
        "outputs": [
          "TABLE_COLUMN[Boolean]"
        ],
        "operator": " & ",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "OR2": [
      {
        "inputs": [
          "Boolean",
          "Boolean"
        ],
        "outputs": [
          "Boolean"
        ],
        "operator": "or",
        "code_before": "(",
        "code_after": ")"
      },
      {
        "inputs": [
          "TABLE_COLUMN[Boolean]",
          "TABLE_COLUMN[Boolean]"
        ],
        "outputs": [
          "TABLE_COLUMN[Boolean]"
        ],
        "operator": " | ",
        "code_before": "(",
        "code_after": ")"
      }
    ],
    "IF": [
      {
        "inputs": [
          "Boolean",
          "Number",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "sc_if(",
        "code_after": ")",
        "add_functions": [
          "SC_IF"
        ]
      },
      {
        "inputs": [
          "Boolean",
          "Text",
          "Text"
        ],
        "outputs": [
          "Text"
        ],
        "code_before": "sc_if(",
        "code_after": ")",
        "add_functions": [
          "SC_IF"
        ]
      }
    ],
    "FILTER": [
      {
        "inputs": [
          "ARRAY[Number]",
          "ARRAY[Boolean]",
          "Number"
        ],
        "outputs": [
          "ARRAY[Number]"
        ],
        "code_before": "sc_filter(",
        "code_after": ")",
        "add_functions": [
          "SC_FILTER"
        ]
      },
      {
        "inputs": [
          "ARRAY[Text]",
          "ARRAY[Boolean]",
          "Text"
        ],
        "outputs": [
          "ARRAY[Text]"
        ],
        "code_before": "sc_filter(",
        "code_after": ")",
        "add_functions": [
          "SC_FILTER"
        ]
      }
    ],
    "SC_FIRST_TRUE": [
      {
        "inputs": [
          "ARRAY[Date]",
          "ARRAY[Boolean]",
          "Date"
        ],
        "outputs": [
          "Date"
        ],
        "code_before": "sc_first_true(",
        "code_after": ")",
        "add_functions": [
          "SC_FIRST_TRUE"
        ]
      },
      {
        "inputs": [
          "ARRAY[Text]",
          "ARRAY[Boolean]",
          "Text"
        ],
        "outputs": [
          "Text"
        ],
        "code_before": "sc_first_true(",
        "code_after": ")",
        "add_functions": [
          "SC_FIRST_TRUE"
        ]
      },
      {
        "inputs": [
          "ARRAY[Number]",
          "ARRAY[Boolean]",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "sc_first_true(",
        "code_after": ")",
        "add_functions": [
          "SC_FIRST_TRUE"
        ]
      },
      {
        "inputs": [
          "TABLE_COLUMN[Text]",
          "TABLE_COLUMN[Boolean]",
          "Text"
        ],
        "outputs": [
          "Text"
        ],
        "code_before": "sc_first_true_pd(",
        "code_after": ")",
        "add_functions": [
          "SC_FIRST_TRUE_PD"
        ]
      },
      {
        "inputs": [
          "TABLE_COLUMN[Number]",
          "TABLE_COLUMN[Boolean]",
          "Number"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "sc_first_true_pd(",
        "code_after": ")",
        "add_functions": [
          "SC_FIRST_TRUE_PD"
        ]
      }
    ],
    "EOMONTH": [
      {
        "inputs": [
          "Date",
          "Number"
        ],
        "outputs": [
          "Date"
        ],
        "code_before": "sc_eomonth(",
        "code_after": ")",
        "add_functions": [
          "SC_EOMONTH"
        ]
      }
    ],
    "LOOKUP": [
      {
        "inputs": [
          "Date",
          "TABLE_COLUMN[Date]",
          "TABLE_COLUMN[Number]"
        ],
        "outputs": [
          "Number"
        ],
        "code_before": "sc_lookup(",
        "code_after": ")",
        "add_functions": [
          "SC_LOOKUP"
        ]
      }
    ]
  },
  "functions": {
    "SC_FIRST_TRUE": {
      "text": "def sc_first_true(result_list, bool_list, default):\n    for result, is_true in zip(result_list, bool_list):\n        if is_true:\n            return result\n    return default"
    },
    "SC_FIRST_TRUE_PD": {
      "text": "def sc_first_true_pd(result_col, bool_col, default) :\n    filtered = result_col[bool_col]\n    return filtered.iloc[0] if not filtered.empty else default",
      "requires_imports": [
        "import pandas as pd"
      ]
    },
    "SC_LOOKUP": {
      "text": "def sc_lookup(value, lookup_column, result_column):  \n    exact_match = result_column[lookup_column == value]\n    if not exact_match.empty:\n        return exact_match.iloc[0]\n\n    if lookup_column.is_monotonic_increasing :\n        # Find the largest value that is less than 'value'\n        less_than_value = lookup_column[lookup_column < value]\n        if not less_than_value.empty:\n            # Return the corresponding value from result_column\n            index_of_nearest_value = less_than_value.idxmax()\n            return result_column[index_of_nearest_value]\n\n    # If value not found return fist item from results column\n    return result_column.iloc[0]\n",
      "requires_imports": [
        "import pandas as pd"
      ]
    },
    "SUBTRACT_DAYS_FROM_DATETIME": {
      "text": "def subtract_days_from_datetime(date_obj, days):\n    # convert to seconds to capture fractionaly days\n    seconds_to_add = days * 24 * 60 * 60\n    return date_obj + timedelta(seconds=seconds_to_add)",
      "requires_imports": [
        "from datetime import datetime",
        "from datetime import timedelta"
      ]
    },
    "ADD_DAYS_TO_DATETIME": {
      "text": "def add_days_to_datetime(date_obj, days):\n    # convert to seconds to capture fractionaly days\n    seconds_to_add = days * 24 * 60 * 60\n    return date_obj + timedelta(seconds=seconds_to_add)",
      "requires_imports": [
        "from datetime import datetime",
        "from datetime import timedelta"
      ]
    },
    "SC_EOMONTH": {
      "text": "def sc_eomonth(start_date, months):\n    new_date = start_date + relativedelta(months=months)\n    # Set the day to the last day of the new month\n    end_of_month = new_date.replace(day=1) + relativedelta(months=1) - relativedelta(days=1)\n    return end_of_month",
      "requires_imports": [
        "from datetime import datetime",
        "from dateutil.relativedelta import relativedelta"
      ]
    },
    "SC_FILTER": {
      "text": "def sc_filter(result_list, condition_list, default):\n    filtered_results = []\n\n    for result in result_list:\n        # Check each condition\n        for condition in condition_list:\n            if condition(result):\n                filtered_results.append(result)\n                break\n        else:\n            # If no conditions are met, append the default value\n            filtered_results.append(default)\n\n    return filtered_results"
    },
    "SC_COMPARE_ELEMENTS": {
      "text": "def sc_compare_elements(my_list, value):\n    return [element == value for element in my_list]"
    },
    "SC_IF": {
      "text": "def sc_if(condition, if_true, if_false):\n    if condition:\n        return if_true\n    else:\n        return if_false"
    }
  },
  "commutative_functions_to_convert_to_binomial": {},
  "templates": {},
  "transforms": {},
  "function_logic_dags": {}
}